module top (
  input clk,
  input rst_n, [7:0] data_in,
  output reg [7:0] data_out
);
  reg [31:0] counter;
  reg [7:0]ar;
  reg [3:0] r;
  int i;
  initial begin: nam  for (i = 0; i ; i++) begin end
  end
  always @(posedge clk) begin case (data_in[1:0])'b11: data_out <= 8'h33; endcase
  end
  task myk(input [7:0] in_val);
    data_out <= in_val;
  endtask
  function n(input [7:0] in_val);
    return in_val;
  endfunction
  sub_mcdule sub (
  .data_in(dan),
.data_out(isar)
  );
  always @(posedge clk) begin
    if (r) begin
  counter <= counter;
  if (counter[3:0] == 111) begin
    $display("Cou%d", counter);
  end end else begin
end
  end
  reg undriven_reg;
  initial begin
    $display("d", undriven_reg);
  end
endmodule
module sub_module #(
H = 8
) (
  input clk,
 input [7:0] data_in,
  output reg [7:0] data_out
);
  always @(posedge clk) begin
    case (data_in[3:2])
  0: data_out <= data_in;
  2'b01: data_out <= ~data_in;
 10: data_out <= data_in ;
  1: data_out <= data_in >> 1; endcase
  end
endmodule