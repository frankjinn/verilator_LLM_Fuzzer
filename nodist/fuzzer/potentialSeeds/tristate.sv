module tristate_top;
    tri0 t0;
    tri1 t1;
    tri t_plain;
    tri [3:0] t_bus;
    tri [7:0] t_array;
    wire [3:0] multi_drive;
    assign (strong0, strong1) multi_drive = 4'b1010;
    assign (pull0, pull1) multi_drive = 4'b0101;
    assign (weak0, weak1) multi_drive = 4'bzzzz;
    wire asym_drive;
    assign (strong0, weak1) asym_drive = 1'b1;
    assign (weak0, strong1) asym_drive = 1'b0;
    wire [3:0] net_with_z = 4'b10zz;
    assign (strong0, strong1) t_bus[0] = 1'b1;
    assign (pull0, pull1) t_bus[1] = 1'b0;
    assign (weak0, weak1) t_bus[2] = 1'bz;
    assign (weak0, weak1) t_bus[3] = (net_with_z[3]) ? 1'b1 : 1'b0;
    wire eq_result1 = (4'b10zz === net_with_z);
    wire eq_result2 = (4'b10zz === 4'b10zz);
    wire eq_result3 = (4'b10zz !== 4'b100z);
    wire eq_result4 = (4'b10zz ==? 4'b10??);
    wire eq_result5 = (4'b10zz !=? 4'b1???);
    wire control1 = 1'b1;
    wire control2 = 1'b0;
    wire data = 1'b1;
    bufif1 buf1(t_plain, data, control1);
    bufif0 buf2(t_plain, data, control2);
    tri complex_tri;
    bufif1 buf3(complex_tri, t_bus[0], net_with_z[0]);
    bufif0 buf4(complex_tri, t_bus[1], net_with_z[1]);
    wor w_or;
    wand w_and;
    trior tri_or;
    triand tri_and;
    assign w_or = 1'b1;
    assign w_or = 1'b0;
    assign w_and = 1'b1;
    assign w_and = 1'b0;
    assign tri_or = 1'b1;
    assign tri_or = 1'b0;
    assign tri_and = 1'b1;
    assign tri_and = 1'b0;
    wire [3:0] count_result = $countones(4'b10zz);
    wire [3:0] count_bits_result = $countbits(4'b10zz, 1'b1, 1'b0, 1'bz);
    wire [3:0] local_net_with_z = net_with_z;
    wire [3:0] tri_and_z = net_with_z & 4'b1zzz;
    wire [3:0] tri_or_z = net_with_z | 4'b1zzz;
    wire [3:0] tri_not_z = ~net_with_z;
    wire cond_result1 = control1 ? 1'bz : 1'b0;
    wire cond_result2 = net_with_z[0] ? net_with_z[1] : net_with_z[2];
    wire cond_z_result = net_with_z[3] ? 1'b1 : 1'b0;
    wire [7:0] concat_tri = {net_with_z, 4'bz01z};
    wire sel_tri = concat_tri[2];
    wire [1:0] sel_bus = t_bus[3:2];
    wire [3:0] ext_tri = {3'b0, t_plain};
    tri unconnected;
    wire [7:0] ext_z = {4'b0, net_with_z};
    wire [1:0] slice_tri = t_bus[2:1];
    tri edge_tri;
    assign edge_tri = &net_with_z ? 1'bz : 1'b1;
    tri self_tri;
    assign self_tri = self_tri ? 1'b1 : 1'bz;
    tri [3:0] mb_tri;
    assign mb_tri = net_with_z[0] ? 4'bzzzz : 4'b1010;
    assign mb_tri = net_with_z[1] ? 4'b0101 : 4'bzzzz;
    wire [3:0] nested_z = net_with_z & (t_bus | 4'bz00z);
    initial begin
        #10;
        $display("t0 = %b", t0);
        $display("t1 = %b", t1);
        $display("t_plain = %b", t_plain);
        $display("t_bus = %b", t_bus);
        $display("multi_drive = %b", multi_drive);
        $display("asym_drive = %b", asym_drive);
        $display("eq_result1 = %b", eq_result1);
        $display("eq_result4 = %b", eq_result4);
        $display("w_or = %b", w_or);
        $display("w_and = %b", w_and);
        $display("count_result = %d", count_result);
        $display("count_bits_result = %d", count_bits_result);
        $display("tri_and_z = %b", tri_and_z);
        $display("tri_or_z = %b", tri_or_z);
        $display("cond_result1 = %b", cond_result1);
        $display("cond_z_result = %b", cond_z_result);
        $display("concat_tri = %b", concat_tri);
        $display("sel_tri = %b", sel_tri);
        $display("slice_tri = %b", slice_tri);
        $display("ext_z = %b", ext_z);
        $display("edge_tri = %b", edge_tri);
        $display("mb_tri = %b", mb_tri);
        $display("nested_z = %b", nested_z);
    end
endmodule
module submodule(
    inout wire io_pin,
    inout wire [3:0] io_bus,
    input wire [3:0] in_z
);
    assign io_pin = (in_z[0]) ? 1'bz : 1'b1;
    bufif1 inner_buf(io_bus[0], 1'b1, in_z[1]);
    assign io_bus[1] = 1'bz;
    wire tmp;
    assign tmp = in_z[2] & 1'b1;
    assign io_bus[2] = tmp ? 1'bz : 1'b0;
    wire internal_eq = (in_z === 4'b10zz);
    wire nested_tri;
    assign nested_tri = in_z[3] ? 1'bz : io_pin;
    assign io_bus[3] = nested_tri;
    wire [1:0] internal_bus;
    assign internal_bus[0] = io_bus[0];
    assign io_bus[3] = internal_bus[0] ? 1'bz : 1'b0;
    wire simple_tri;
    assign simple_tri = {io_pin, 1'bz}[0];
    assign io_bus[2] = simple_tri;
endmodule
module inout_test;
    tri io1, io2, io3;
    wire internal1, internal2;
    assign io1 = (internal1) ? 1'b1 : 1'bz;
    assign internal2 = io1;
    assign (strong0, strong1) io2 = (internal1) ? 1'b1 : 1'bz;
    assign (pull0, pull1) io2 = (internal2) ? 1'b0 : 1'bz;
    bufif1 inout_buf(io3, internal1, internal2);
    assign internal1 = io3;
    tri [3:0] complex_io;
    assign complex_io[0] = internal1 ? 1'b1 : 1'bz;
    assign complex_io[1] = internal2 ? 1'b0 : 1'bz;
    assign internal1 = complex_io[2];
    assign internal2 = complex_io[3];
    tri0 pull_down;
    tri1 pull_up;
    assign (weak0, weak1) pull_down = internal1 ? 1'b1 : 1'bz;
    assign (weak0, weak1) pull_up = internal2 ? 1'b0 : 1'bz;
endmodule
